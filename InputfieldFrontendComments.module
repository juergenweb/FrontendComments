<?php

namespace ProcessWire;

/*
 * Input field for the comments
 * This class collects the input data in the backend
 *
 * Created by JÃ¼rgen K.
 * https://github.com/juergenweb
 * File name: InputfieldFrontendComments.module
 * Created: 24.05.2025
 *
 */

class InputfieldFrontendComments extends Inputfield
{

    protected array $frontendFormsConfig = [];
    protected array $frontendCommentsManagerConfig = [];
    protected string $adminThemeName = '';

    /**
     * @throws WireException
     */
    public function __construct()
    {
        parent::__construct();

        // grab configuration values from the FrontendForms module
        $this->frontendFormsConfig = FieldtypeFrontendComments::getFrontendFormsConfigValues();
        if (wire('modules')->isInstalled('FrontendCommentsManager')) {
            $this->frontendCommentsManagerConfig = wire('modules')->getConfig('FrontendCommentsManager');
        }

        $adminTheme = $this->wire('adminTheme');
        $this->adminThemeName = $adminTheme->getModuleInfo()['title'];

    }

    /**
     * Get the info data about this input field
     * @return array
     */
    public static function getModuleInfo(): array
    {
        return array(
            'title' => __('Inputfield FrontendComments', __FILE__),
            'summary' => __('Inputfield for managing comments on a page.',
                __FILE__),
            'href' => 'https://github.com/juergenweb/FieldtypeFrontendComments',
            'icon' => 'comment',
            'permanent' => false,
            'version' => '1.0.0',
            'requires' => [
                'FieldtypeFrontendComments',
                'PHP>=8.0',
                'ProcessWire>=3'
            ],
            'author' => 'JÃ¼rgen Kern'
        );
    }

    /**
     * Render the comment list in the backend
     * @return string
     * @throws WireException
     * @throws WirePermissionException
     */
    public function ___render(): string
    {

        $field = $this->wire('fields')->get($this->get('name'));

        $icons = [
            FieldtypeFrontendComments::approved => 'fa-check-circle',
            FieldtypeFrontendComments::spam => 'fa-times',
            FieldtypeFrontendComments::pendingApproval => 'fa-commenting-o',
            FieldtypeFrontendComments::featured => 'fa-star'
        ];

        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->label = $this->_('Comments');

        if ((array_key_exists('useManager', $this->frontendCommentsManagerConfig)) && $this->frontendCommentsManagerConfig['useManager']) {
            $noEdit = $this->modules->get('InputfieldMarkup');
            $href = $this->wire('urls')->admin . 'setup/fc-comments-manager/list/' . $field->get('id') . '/?page=' . wire('input')->get('id');
            $link = '<a href="' . $href . '">' . $this->_('Comments Manager') . '</a>';
            $noEdit->set('markupText', sprintf($this->_('Please use the %s to edit the comments.'), $link));
            $fieldset->add($noEdit);
        } else {

            // Add text that there are no comments at the moment
            if (count($this->value) === 0) {
                $noComments = $this->modules->get('InputfieldMarkup');
                $noComments->set('markupText', $this->_('There are no comments at the moment.'));
                $fieldset->add($noComments);
            } else {

                // list of comments
                $i = 1;

                $ids = [];
                if ($this->wire('session')->get('failed')) {
                    $ids = $this->wire('session')->get('failed');
                    $this->wire('session')->remove('failed');
                }

                foreach ($this->value as $comment) {


                    $warning = $this->wire('session')->get('statuswarning-' . $comment->get('id'));
                    $warningtext = $this->wire('session')->get('statuswarningtext-' . $comment->get('id'));

                    $this->wire('session')->remove('statuswarning-' . $comment->get('id'));
                    $this->wire('session')->remove('statuswarningtext-' . $comment->get('id'));

                    $commentfieldset = $this->modules->get('InputfieldFieldset');
                    $commentfieldset->set('icon', $icons[$comment->status]);

                    $commentfieldset->set('label', strtoupper(FieldtypeFrontendComments::statusTexts()[$comment->status]) . ': ' . $this->_('Comment') . ' #' . $i . ' (ID: ' . $comment->get('id') . ') ' .
                        sprintf($this->_('Posted on: %s'), $this->wire('datetime')->date($this->frontendFormsConfig['input_dateformat'], $comment->created)));
                    if ($ids) {
                        if (in_array($comment->id, $ids)) {
                            $collapsed = false;
                        } else {
                            $collapsed = true;
                        }
                    } else {
                        $collapsed = true;
                    }

                    if ($warning) {
                        $commentfieldset->attr('class', 'statuswarning');
                        $commentfieldset->set('icon', 'fa-exclamation-triangle');
                        $commentfieldset->addClass('statuswarning');
                        // create warning alert
                        if ($this->adminThemeName === 'Uikit') {
                            $alertContainerClass = 'uk-alert uk-alert-warning';
                        } else {
                            $alertContainerClass = 'NoticeWarning';
                        }
                        $replies = $comment->getReplies();
                        $repliesIDs = [];
                        foreach ($replies as $reply) {
                            $repliesIDs[] = $reply->get('id');
                        }
                        $commentfieldset->prependMarkup('<div class="' . $alertContainerClass . '"><p class="warning">' . $warningtext . '</p><p class="reply-ids">' . $this->_('IDs of reply comments') . ': ' . implode(', ', $repliesIDs) . '</p></div>');

                        $collapsed = false;
                    }
                    $commentfieldset->set('collapsed', $collapsed);

                    // comment text
                    $text = $this->modules->get('InputfieldTextarea');
                    $text->label = $this->_('Comment');
                    $text->attr('id|name', $this->name . '_text_' . $comment->id);
                    $text->attr('value', $comment->text);
                    $text->set('required', true);
                    $text->collapsed(Inputfield::collapsedNever);
                    $commentfieldset->add($text);

                    $colwidth = '25';

                    // email
                    $email = $this->modules->get('InputfieldText');
                    $email->label = $this->_('Email');
                    $email->attr('id|name', $this->name . '_email_' . $comment->id);
                    $email->attr('value', $comment->email);
                    $email->set('columnWidth', $colwidth);
                    $email->set('required', true);
                    $email->collapsed(Inputfield::collapsedNever);
                    if ($this->wire('session')->get('email')) {
                        $email->error($this->wire('session')->get('email'));
                        $this->wire('session')->remove('email');
                    }
                    $commentfieldset->add($email);

                    // author
                    $author = $this->modules->get('InputfieldText');
                    $author->label = $this->_('Author');
                    $author->attr('id|name', $this->name . '_author_' . $comment->id);
                    $author->attr('value', $comment->author);
                    $author->set('columnWidth', $colwidth);
                    $author->set('required', true);
                    $author->collapsed(Inputfield::collapsedNever);
                    $commentfieldset->add($author);

                    // status
                    $status = $this->modules->get('InputfieldSelect');
                    $status->label = $this->_('Status');
                    $status->attr('id|name', $this->name . '_status_' . $comment->id);
                    $status->attr('value', $comment->status);
                    $status->collapsed(Inputfield::collapsedNever);
                    $status->addOption(FieldtypeFrontendComments::pendingApproval, $this->_('Pending approval'));
                    $status->addOption(FieldtypeFrontendComments::approved, $this->_('Approved'));
                    $status->addOption(FieldtypeFrontendComments::featured, $this->_('Featured'));
                    $status->addOption(FieldtypeFrontendComments::spam, $this->_('SPAM'));
                    $status->addOption('delete', $this->_('Delete the comment'));
                    $status->set('columnWidth', $colwidth);
                    $status->set('required', true);
                    $commentfieldset->add($status);

                    // website
                    $website = $this->modules->get('InputfieldURL');
                    $website->label = $this->_('Homepage');
                    $website->attr('id|name', $this->name . '_website_' . $comment->id);
                    $website->attr('value', $comment->website);
                    $website->collapsed(Inputfield::collapsedNever);
                    $website->set('columnWidth', $colwidth);
                    if ($this->wire('session')->get('website')) {
                        $website->error($this->wire('session')->get('website'));
                        $this->wire('session')->remove('website');
                    }
                    $commentfieldset->add($website);

                    // moderation feedback textfield
                    $feedback = $this->modules->get('InputfieldCKEditor');
                    $feedback->set('removePlugins', 'pwimage, sourcedialog');
                    $feedback->set('toolbar', 'Format, Bold, Italic, Underline, Blockquote, NumberedList, BulletedList, SpecialChar, PWLink');
                    $feedback->set('label', $this->_('Moderation feedback'));
                    $feedback->attr('id|name', $this->name . '_moderation_feedback_' . $comment->id);
                    $feedback->attr('value', $comment->moderation_feedback);
                    $feedback->set('description', $this->_('Enter a feedback to a comment'));
                    $feedback->set('notes', $this->_('This text will be displayed directly below the comment.'));
                    $feedback->collapsed(Inputfield::collapsedBlank);
                    $commentfieldset->add($feedback);

                    $fieldset->add($commentfieldset);
                    $i++;
                }
            }
        }

        return $fieldset->render();
    }

    /**
     * Process input for the comment inputs
     * Values will be sanitized and validated before saving it again to the database
     * @param WireInputData $input
     * @return InputfieldFrontendComments
     * @throws WireException
     * @throws WirePermissionException
     * @throws WireException
     * @throws WireException
     */
    public function ___processInput(WireInputData $input): InputfieldFrontendComments
    {

        if ((!array_key_exists('useManager', $this->frontendCommentsManagerConfig)) || $this->frontendCommentsManagerConfig['useManager'] == 0) {

            $n = 1;
            $sanitizer = $this->wire('sanitizer');

            // array containing all possible status for a comment
            $statusArray = [
                FieldtypeFrontendComments::approved,
                FieldtypeFrontendComments::featured,
                FieldtypeFrontendComments::spam,
                FieldtypeFrontendComments::pendingApproval
            ];

            // names of the various form fields
            $names = array(
                'text',
                'email',
                'author',
                'status',
                'website',
                'moderation_feedback'
            );

            // loop through each comment
            foreach ($this->value as $comment) {

                $comment->setTrackChanges(true);

                $errors = [];
                // loop through each input field of the comment -> sanitize and validate it
                foreach ($names as $key) {

                    // get the value of each comment field
                    $inputName = $this->name . "_" . $key . "_" . $comment->id;
                    $value = isset($input[$inputName]) ? $input[$inputName] : '';

                    // important, otherwise all changes will not be saved
                    $this->value->trackChange('update');

                    switch ($key) {
                        case 'text':

                            if (!$value) { // required
                                $this->warning(sprintf($this->_('The comment text on comment #%d may only be changed, but not deleted.'), $n));
                            } else {
                                if ($comment->$key != $value) {
                                    $value = $sanitizer->textarea($value);
                                    $comment->$key = $value;
                                    $this->message(sprintf($this->_('Updated %s for comment #%d'), $key, $n));
                                }
                            }

                            break;
                        case 'email':

                            if (!$value) { // required
                                $this->warning(sprintf($this->_('The mail address on comment #%d may only be changed, but not deleted.'), $n));
                            } else {
                                if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
                                    $this->error(sprintf($this->_('Mail address on comment #%s is not in the correct format.'), $n));
                                    $this->wire('session')->set('email', $this->_('The email address is not valid.'));
                                    $comment->$key = $value;
                                    $errors[] = 'email';
                                } else {
                                    if ($comment->$key != $value) {
                                        $value = $sanitizer->email($value);
                                        $comment->$key = $value;
                                        $this->message(sprintf($this->_('Updated %s for comment #%d'), $key, $n));
                                    }
                                }
                            }

                            break;
                        case 'author':

                            if (!$value) {
                                $this->warning(sprintf($this->_('The name of the author on comment #%d may only be changed, but not deleted.'), $n));
                            } else {
                                if ($comment->$key != $value) {
                                    $value = $sanitizer->text($value);
                                    $comment->$key = $value;
                                    $this->message(sprintf($this->_('Updated %s for comment #%d'), $key, $n));
                                }
                            }

                            break;
                        case 'website':

                            if ($value) {

                                $pattern = '%^(?:(?:https?|ftp):)?//(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4])|(?:(?:[a-z0-9\x{00a1}-\x{ffff}][a-z0-9\x{00a1}-\x{ffff}_-]{0,62})?[a-z0-9\x{00a1}-\x{ffff}]\.)+[a-z\x{00a1}-\x{ffff}]{2,}\.?)(?::\d{2,5})?(?:[/?#]\S*)?$%iuS';

                                if (!preg_match($pattern, $value)) {
                                    $this->error(sprintf($this->_('The URL of the homepage of the author on comment #%s is not a valid URL.'), $n));
                                    $this->wire('session')->set('website', $this->_('This is not a valid URL'));
                                    $comment->$key = $value;
                                    $errors[] = 'website';
                                } else {

                                    if ($comment->$key != $value) {
                                        $value = $sanitizer->httpUrl($value);
                                        $comment->$key = $value;
                                        $this->message(sprintf($this->_('Updated %s for comment #%d'), $key, $n));
                                    }
                                }
                            } else {

                                if ($comment->$key != $value) {
                                    $comment->$key = $value;
                                    $this->message(sprintf($this->_('Updated %s for comment #%d'), $key, $n));
                                }
                            }
                            break;
                        case 'status':
                            if ($value !== 'delete'){
                                $value = $sanitizer->int($value);
                            } else {
                                $this->value->trackChange('deleteComment-'.$comment->id);
                            }

                            if (is_int($value) && !in_array($value, $statusArray)) {
                                $this->error(sprintf($this->_('Status value on comment #%s is not valid.'), $n));
                            } else {

                                $comment->$key = $value;
                            }
                            break;
                        case 'moderation_feedback':

                            if ($comment->$key != $value) {
                                $comment->$key = $value;
                                $this->message(sprintf($this->_('Updated %s for comment #%d'), $key, $n));
                            }
                            break;
                    }
                }

                $n++;
                if ($errors) {
                    $failedComments = $this->wire('session')->get('failed');
                    if ($failedComments) {
                        $failedComments[] = $comment->id;
                        $this->wire('session')->set('failed', $failedComments);
                    } else {
                        $this->wire('session')->set('failed', [$comment->id]);
                    }
                }

                // notify the parent of the change so the comment field will be saved again
                if ($comment->getChanges()) {
                    $parent = $this->getParent();
                    if ($parent) $parent->trackChange($this->name);
                }
            }
        }
        return $this;

    }

}
