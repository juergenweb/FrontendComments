<?php namespace ProcessWire;

/*
 * Comments Fieldtype for storing user comments for a page
 * This comment's field is especially designed to work with the FrontendForms module
 *
 * Created by JÃ¼rgen K.
 * https://github.com/juergenweb
 * File name: FieldtypeFrontendComments.module
 * Created: 23.04.2025
 */

use Exception;
use FrontendComments\FrontendComment;
use FrontendComments\FrontendComments;
use FrontendComments\FrontendCommentArray;
use FrontendComments\Notifications;
use PDO;

class FieldtypeFrontendComments extends FieldtypeMulti
{
    const moderateNone = 0; // no moderation - all comments will be published immediately
    const moderateAll = 1; // all comments need to be approved
    const moderateNew = 2; // only new comments need to be approved
    const pendingApproval = 0; // status waiting for approval
    const approved = 1; // status approved
    const spam = 2; // status SPAM
    const featured = 4; // approved, but special marked as important
    const queueTable = 'fc_comments_queues';
    protected FrontendForms $frontendForms;
    protected array $frontendFormsConfig = [];
    protected string|int $input_fc_queue_batch = 20;

    /**
     * @throws WireException
     * @throws WirePermissionException
     */
    public function __construct()
    {

        parent::__construct();

        // grab the FrontendForms module to be able to use some methods of it
        $this->frontendForms = wire('modules')->get('FrontendForms');

        // grab configuration values from the FrontendForms module
        $this->frontendFormsConfig = self::getFrontendFormsConfigValues();

        // set database object
        $this->database = $this->wire()->database;

    }

    /**
     * Run during initialization
     * @return void
     */
    public function init(): void
    {
        parent::init();

        require_once(__DIR__ . '/FrontendComments.php');
        require_once(__DIR__ . '/Uikit3/FrontendCommentsUikit3.php');
        require_once(__DIR__ . '/FrontendComment.php');
        require_once(__DIR__ . '/Uikit3/FrontendCommentUikit3.php');
        require_once(__DIR__ . '/FrontendCommentPagination.php');
        require_once(__DIR__ . '/Uikit3/FrontendCommentPaginationUikit3.php');
        require_once(__DIR__ . '/Bootstrap5/FrontendCommentBootstrap5.php');
        require_once(__DIR__ . '/Bootstrap5/FrontendCommentPaginationBootstrap5.php');
        require_once(__DIR__ . '/Pico2/FrontendCommentPico2.php');
        require_once(__DIR__ . '/Pico2/FrontendCommentPaginationPico2.php');
        require_once(__DIR__ . '/FrontendCommentArray.php');

        $this->addHookAfter('Inputfield::render', $this, 'overwriteExamplesNotes');
        $this->addHookAfter('LazyCron::every2Minutes', $this, 'sendQueuedEmails');
        $this->addHookAfter('ProcessField::fieldDeleted', $this, 'deleteVotesTable');
        $this->addHookBefore('Page::render', $this, 'noEmailWarning');
        $this->addHookAfter('LazyCron::everyDay', $this, 'deleteSpam');
        $this->addHookBefore('InputfieldTextarea::processInput', $this, 'validateEmailAddresses');
        $this->addHookBefore('FieldtypeMulti::savePageField', $this, 'correctStatusValues');
        $this->addHookAfter('FieldtypeMulti::savePageField', $this, 'updateTables');

    }

    /**
     * Array containing the texts for each status
     * @return array
     */
    public static function statusTexts(): array
    {
        return [
            0 => __('pending approval'),
            1 => __('approved'),
            2 => __('SPAM'),
            4 => __('featured')
        ];
    }

    /**
     * Check and change the status value before saving the comments
     * This method runs before the savePageField method and validates the status value
     * @param HookEvent $event
     * @return void
     * @throws WireException
     */
    public function correctStatusValues(HookEvent $event): void
    {

        // run only on FieldtypeFrontendComments
        if ($event->object instanceof FieldtypeFrontendComments) {

            $page = $event->arguments(0);
            $field = $event->arguments(1);
            $fieldName = $field->name;
            $comments = $page->$fieldName;

            $n = 1;
            foreach ($comments as $comment) {
                $text = null;

                if ($comment->isChanged('status')) {

                    // add remote flag 2 if status has been changed for the first time in backend and no remote flag is present
                    if ($this->wire('page')->rootParent->get('id') === 2) {
                        if (!$comment->remote_flag) {
                            $comment->remote_flag = 2;
                        }
                    }

                    $newStatus = $comment->get('status');
                    $oldStatus = $comment->getChanges(true)['status'][0];

                    if ($comment->hasReplies()) {

                        switch ($newStatus) {
                            case (FieldtypeFrontendComments::pendingApproval):
                                if ($comment->getReplies(FieldtypeFrontendComments::approved)->count()) {
                                    $text = sprintf($this->_('The comment #%s cannot be set to the status "%s" because answers already exist. Therefore, the status remains at "%s".'), $n, self::statusTexts()[FieldtypeFrontendComments::pendingApproval], self::statusTexts()[$oldStatus]);
                                }
                                break;
                            case ('delete'):
                                if ($comment->getReplies(FieldtypeFrontendComments::approved)->count()) {
                                    $text = sprintf($this->_('Comment #%s cannot be deleted because there are already replies to this comment. Therefore, the status remains at "%s".'), $n, self::statusTexts()[$oldStatus]);
                                    $text .= ' ' . $this->_('You must first delete all replies before you can delete this comment.');
                                }
                                break;
                            case(FieldtypeFrontendComments::spam):
                                $text = sprintf($this->_('The comment #%s cannot be set to the status "%s" because answers already exist. Therefore, the status remains at "%s".'), $n, self::statusTexts()[FieldtypeFrontendComments::spam], self::statusTexts()[$oldStatus]);
                                $text .= ' ' . $this->_('You must first delete all replies before you can mark this comment as SPAM.');
                                break;
                        }
                        if (!is_null($text)) {
                            $comment->set('status', $oldStatus);
                            $this->warning($text);
                            $this->wire('session')->set('statuswarning-' . $comment->get('id'), $comment->get('id'));
                            $this->wire('session')->set('statuswarningtext-' . $comment->get('id'), $text);
                        }

                    } else {
                        if ($newStatus === 'delete') {
                            $comments->remove($comment);
                        }
                    }

                }
                $n++;
            }

            //add the changed comment array to the page object
            $page->$fieldName = $comments;
            $event->arguments(0, $page);
        }

    }

    /**
     * Add or delete entries in the fc_comments_queues table and the votes table
     * This method runs after the savePageField method and deletes or changes values inside the queue and votes tables
     * @param HookEvent $event
     * @return void
     */
    protected function updateTables(HookEvent $event): void
    {

        // run only on FieldtypeFrontendComments
        if ($event->object instanceof FieldtypeFrontendComments) {

            $page = $event->arguments(0);
            $field = $event->arguments(1);
            $comments = $page->get($field->name);

            $changes = $comments->getChanges(true);

            if ($changes) {

                foreach ($changes as $key => $i) {
                    switch ($key) {
                        case('add'):

                            $addedComments = $comments->getItemsAdded();

                            // its a new comment
                            foreach ($addedComments as $comment) {

                                // get the id property of the newly added comment from the database
                                $id = $comment->getCommentIDFromDatabase();

                                if (is_int($id)) {

                                    $comment->set('id', $id);
                                    if ($comment->isPublished()) {
                                        bd('comment added to queue table');
                                        $comment->addCommentToQueueTable();
                                    }
                                } else {
                                    // an error occured
                                }

                            }
                            break;
                        case('remove'):
                            // delete entries of deleted comments inside the queue and votes table
                            bd('a comment has been removed');
                            // delete entries of deleted comments inside the queue and votes table
                            $deletedComments = $comments->getItemsRemoved();

                            if ($deletedComments) {
                                // delete the comment ids from the queue and votes table
                                foreach ($deletedComments as $comment) {
                                    $comment->deleteEntriesInQueueTable();
                                    $comment->deleteEntriesInVotesTable();
                                }
                            }
                            break;
                        case('statuschange'):

                            // get all comments with status change
                            $updatedComments = $changes['statuschange'][0];

                            foreach ($updatedComments as $comment) {

                                if ($comment->isPublished()) {
                                    $comment->addCommentToQueueTable();
                                    bd('a comment has been added to the queue table');
                                } else {
                                    $comment->deleteEntriesInQueueTable();
                                    bd('a comment was removed from the queue table');
                                }
                            }
                            break;
                        case('notificationchange'):
                            // get all comments with notification change
                            $notificationComments = $changes['notificationchange'][0];
                            break;
                    }
                }
            }


        }

    }

    /**
     * Group an assoc. array by a certain key
     * @param $array
     * @param $key
     * @return array
     */
    protected function groupBy($array, $key): array
    {
        $return = array();
        foreach ($array as $val) {
            $return[$val[$key]][] = $val;
        }
        return $return;
    }

    /**
     * Render all necessary CSS links
     * @param bool $useStarRating
     * @return string
     */
    public static function renderCSSFiles(bool $useStarRating = true): string
    {

        // url to FrontendComments asset folder
        $url = wire('config')->urls->get('FieldtypeFrontendComments') . 'assets/';

        // path to the assets folder
        $pathToCSSFile = wire('config')->paths->siteModules . 'FrontendComments/assets/';

        // get module version
        $moduleVersion = wire('modules')->getModuleInfo('FieldtypeFrontendComments')['version'];

        // get the framework
        $frameworkFile = FieldtypeFrontendComments::getFrontendFormsConfigValues()['input_framework'];
        $frameworkName = pathinfo($frameworkFile, PATHINFO_FILENAME);

        $out = '<link rel="stylesheet" type="text/css" href="' . $url . 'frontendcommentsmain.css?v=' . $moduleVersion . '">' . PHP_EOL;

        // check if CSS file exists for the given framework setting
        if (file_exists($pathToCSSFile . 'frontendcomments' . $frameworkName . '.css')) {
            // add CSS file
            $out .= '<link rel="stylesheet" type="text/css" href="' . $url . 'frontendcomments' . $frameworkName . '.css?v=' . $moduleVersion . '">' . PHP_EOL;
        }

        // add star-rating if enabled
        if ($useStarRating)
            $out .= '<link rel="stylesheet" type="text/css" href="' . $url . 'star-rating.css?v=' . $moduleVersion . '">' . PHP_EOL;

        return $out;
    }

    /**
     * Render all necessary JS links
     * @param bool $useStarRating
     * @return string
     */
    public static function renderJSFiles(bool $useStarRating = true): string
    {

        // url to FrontendComments asset folder
        $url = wire('config')->urls->get('FieldtypeFrontendComments') . 'assets/';

        // get module version
        $moduleVersion = wire('modules')->getModuleInfo('FieldtypeFrontendComments')['version'];

        $out = '<script src="' . $url . 'frontendcomments.js?v=' . $moduleVersion . '"></script>' . PHP_EOL;

        // add star rating JS to the frontend if enabled
        if ($useStarRating) {
            $out .= '<script src="' . $url . 'star-rating.min.js?v=' . $moduleVersion . ' "></script>' . PHP_EOL;
            $out .= "<script>let stars = new StarRating('.fcm-star-rating');</script>" . PHP_EOL;
        }
        return $out;
    }

    /**
     * Return all featured comments as a WireArray sitewide
     * @param int $limit
     * @return WireArray
     * @throws WireException
     */
    public static function getAllFeaturedComments(int $limit = 0): WireArray
    {

        $selects = [];
        $featured = self::featured;
        foreach (self::getAllCommentFields() as $field) {
            $selects[] = "SELECT * FROM $field->table WHERE status=$featured";
        }

        $statement = implode(' UNION ', $selects);
        $statement .= ' ORDER BY created DESC';
        if ($limit > 0) {
            $statement .= ' LIMIT ' . $limit;
        }

        $query = wire()->database->prepare($statement);
        $query->execute();

        $comments = [];
        while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
            $comments[] = $row;
        }

        $featured_comments = new WireArray();
        foreach ($comments as $comment) {
            $featured_comments[] = $comment;
        }
        return $featured_comments;
    }

    /**
     * Get all queued emails from the database and send the emails in batches of 20 mails at once
     * @return void
     * @throws WireException
     * @throws WirePermissionException
     */
    protected function sendQueuedEmails(): void
    {
        bd('send queued emails');
        // do not send notification mails if a stopqueue session is present
        if ($this->wire('session')->get('stopqueue')) {
            $this->wire('session')->remove('stopqueue');
            return;
        }

        // get the first 20 entries from the queue table
        $select = "SELECT comment_id, email, field_id FROM fc_comments_queues ORDER BY id LIMIT :limit";
        $query = $this->database->prepare($select);
        $query->bindValue(":limit", $this->input_fc_queue_batch, PDO::PARAM_INT);
        $query->execute();

        $mailinglist = [];
        while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
            $mailinglist[] = $row;
        }

        if ($mailinglist) {

            // group the entries by the field id
            $list = $this->groupBy($mailinglist, 'field_id');

            $statements = [];
            foreach ($list as $field_id => $data) {

                $field = $this->wire('fields')->get($field_id);
                // get the table
                $commentTable = $this->database->escapeTable($field->table);
                $statements[] = "SELECT fc_comments_queues.email, fc_comments_queues.field_id, $commentTable.id, $commentTable.pages_id, $commentTable.author, $commentTable.data, $commentTable.created, $commentTable.code FROM fc_comments_queues INNER JOIN $commentTable ON $commentTable.id=fc_comments_queues.comment_id AND fc_comments_queues.page_id=$commentTable.pages_id";

            }

            $statement = implode(' UNION ', $statements);

            $query = $this->database->prepare($statement);
            $query->execute();

            $comments = [];
            while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
                $comments[] = $row;
            }

            $numberOfMails = count($comments);
            foreach ($comments as $comment) {

                $page = $this->wire('pages')->get($comment['pages_id']);
                $field = $this->wire('fields')->get($comment['field_id']);

                // create a FrontendComment object out of the array
                $comment = $this->makeComment($page, $field, $comment);

                // create a notification object
                require_once(__DIR__ . '/Notifications.php');
                $notifications = new Notifications($comments, $field, $page);
                if ($notifications->sendNotificationAboutNewReply($comment)) {
                    bd('queued sent!!');
                    // get the appropriate queued list item and delete it from the table
                    $statement = "DELETE FROM fc_comments_queues WHERE comment_id=:id ";
                    try {
                        $query = $this->database->prepare($statement);
                        $query->bindValue(":id", $comment['id'], PDO::PARAM_INT);
                        $query->execute();
                    } catch (Exception) {
                        // not used at the moment
                    }
                }
            }
        }
    }

    /**
     * Delete the votes table of this comment field after the field has been deleted
     *
     * @param HookEvent $event
     * @return void
     */
    protected function deleteVotesTable(HookEvent $event): void
    {
        $field = $event->arguments(0);

        if ($field->type->className() !== 'FieldtypeFrontendComments') return;
        $tableName = $field->table . '_votes';
        $this->database->query("DROP TABLE IF EXISTS $tableName");
    }

    /**
     * Get all fields of the type "FieldtypeFrontendComments"
     * @return WireArray
     * @throws WireException
     */
    public static function getAllCommentFields(): WireArray
    {
        $items = new WireArray();
        $fields = wire('fields')->findByType('FieldtypeFrontendComments');
        if ($fields) {
            foreach ($fields as $field) {
                $items->add($field);
            }
        }
        return $items;
    }

    /**
     * Get all fields of the type "FieldtypeFrontendComments" that have no notification email added
     * @return array
     * @throws WireException
     */
    protected function getCommentFieldsWithoutNotificationEmail(): array
    {
        $fields = [];
        $configPage = false;

        $commentFields = self::getAllCommentFields();

        if ($commentFields->count()) {

            $ids = array_column($commentFields->getArray(), 'id');

            // check if we are on a field config page
            $currentUrl = $this->wire('input')->url(['withQueryString' => true]);

            $post = null;
            if ($_POST) {
                $post = $this->wire('input')->post();
                $currentUrl = $_SERVER['HTTP_REFERER'];
            }

            if (str_contains($currentUrl, 'setup/field/edit')) {
                // check if query string id is inside the ids' array
                $editID = $this->wire('input')->get('id');
                if (in_array($editID, $ids)) {
                    $configPage = true;
                }
            }

            foreach ($commentFields as $field) {
                $notificationType = $field->input_fc_emailtype;
                if ($notificationType === 'text') {
                    if ($post) {
                        if ($configPage) {
                            $result = $post->get('input_fc_default_to');
                        } else {
                            $result = $this->wire('fields')->get($field->id)->get('input_fc_default_to');
                        }
                    } else {
                        $result = $field->get('input_fc_default_to');
                    }
                } else {
                    if ($post) {
                        if ($configPage) {
                            $result = $post->get('input_fc_emailfield');
                        } else {
                            $result = $this->wire('fields')->get($field->id)->get('input_fc_emailfield');
                        }
                    } else {
                        $result = $field->get('input_fc_emailfield');
                    }
                }
                if (!$result) $fields[] = $field;
            }
        }
        return $fields;
    }

    /**
     * Check if a valid email address has been entered, or a PW email field has been selected inside the module
     * configuration of this module
     * addHookBefore Page::render
     * @return void
     * @throws WireException
     */
    protected function noEMailWarning(): void
    {
        if ($this->wire('user')->isLoggedin()) {
            $fields = self::getCommentFieldsWithoutNotificationEmail();
            foreach ($fields as $field) {
                $url = $this->wire('config')->urls->admin . 'setup/field/edit?id=' . $field->id;
                $text = sprintf($this->_('The input field "%s" requires an email address to be able to send notification mails to at least one moderator.'), '<em>' . $field->name . '</em>') . '<br>';
                $text .= sprintf($this->_('Please go to the %s of this field and enter a valid email address or select a PW field that contains a valid email address inside %s tab.'), '<em>"' . $this->_('Details tab') . '</em>"', '<em>"' . $this->_('Default email configuration') . '</em>"') . '<br>';
                if ((int)$this->wire('input')->get('id') !== $field->id) {
                    $text .= '<a href="' . $url . '">' . $this->_('To the configuration page of this field') . '</a>';
                }
                $this->warning($text, Notice::allowMarkup);
            }
        }
    }

    /**
     * Delete all comments that are marked as spam after a given time period
     * @return void
     * @throws WireException
     */
    protected function deleteSpam(): void
    {
        // get all FrontendComments fields across the site

        $fields = $this->wire('fields')->findByType('FieldtypeFrontendComments');
        if (!$fields) return;

        // loop through all FrontendComments fields and delete all old spam entries
        foreach ($fields as $field) {

            $days = $field->data['input_fc_spam'];
            if ($days > 0) {
                $statement = "DELETE FROM $field->table WHERE status=2 AND created >= UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL $days DAY));";
                $query = $this->wire('database')->prepare($statement);

                try {
                    $query->execute();
                } catch (Exception) {
                    // not used at the moment
                }
            }
        }
    }

    /**
     * Sanitize the textarea that there is only on item in one line and return the cleaned array
     * @param string|null $value
     * @return array
     */
    protected function sanitizeMultilineTextarea(string|null $value): array
    {
        if ($value == null) return [];

        // create an array of string with separator \n
        $items = explode("\n", $value);
        $value = [];
        foreach ($items as $item) {
            $value[] = trim(explode(" ", $item)[0]);
        }
        return $value;
    }

    /**
     * Validate all email addresses that have been entered for sending notification emails to
     * @param HookEvent $event
     * @return void
     */
    protected function validateEmailAddresses(HookEvent $event): void
    {
        if ($event->object->name === 'input_fc_default_to') {
            $value = $event->arguments(0);
            // sanitize all values first
            $dataArray = $this->sanitizeMultilineTextarea($value[$event->object->name]);
            //validate if all array items contain a valid IP address
            foreach ($dataArray as $key => $email) {
                if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                    $this->wire->error(sprintf($this->_('%s is not a valid email address and has therefore been deleted.'),
                        $email));
                    unset($dataArray[$key]);
                }
            }
            // convert it back to string separated by \n
            $dataArray = implode("\n", array_unique($dataArray));
            $value->input_fc_default_to = $dataArray;
            $event->arguments(0, $value);
        }
    }

    /**
     * Get the info data about this module
     * @return array
     */
    public static function getModuleInfo(): array
    {
        return array(
            'title' => __('FrontendComments', __FILE__),
            'summary' => __('Field that let you store user comments on a page using the FrontendForms module.',
                __FILE__),
            'href' => 'https://github.com/juergenweb/FieldtypeFrontendComments',
            'icon' => 'comments',
            'installs' => ['InputfieldFrontendComments'],
            'permanent' => false,
            'version' => '1.0.3',
            'requires' => [
                'FrontendForms>=2.2.35',
                'PHP>=8.0',
                'ProcessWire>=3',
                'LazyCron'
            ],
            'author' => 'JÃ¼rgen Kern'
        );
    }

    /**
     * Get all configuration settings from the FrontendForms module as an assoc. Array
     * @return array
     */
    public static function getFrontendFormsConfigValues(): array
    {
        return array_map(function ($value) {
            return $value;
        }, wire('modules')->getConfig('FrontendForms'));
    }

    /**
     * Internal method to create additional texts under the notes
     * Consists of a default text, followed by the code example
     * @param array $methods
     * @return string
     */
    protected function createAdditionalNotesText(array $methods): string
    {
        // create singular/plural default text
        $text = $this->_n($this->_('This can be overwritten on each comment field by using this method'),
            $this->_('This can be overwritten on each comment field by using these methods'), count($methods));
        $methodsMarkup = [];
        foreach ($methods as $method) {
            $methodsMarkup[] = '<b>' . $method . '</b>';
        }
        $methodText = implode('<br>', $methodsMarkup);
        return '<pre>' . $text . ':<br>' . $methodText . '</pre>';
    }

    /**
     * Array that holds all examples on how to overwrite global setting on per form base
     * These examples will be displayed under the input fields in the module configuration
     * @param HookEvent $event
     * @return void
     */
    protected function overwriteExamplesNotes(HookEvent $event): void
    {
        $field = $event->object;

        $fields = [
            'input_fc_reverse_output' => ['$comments->showFormAfterComments(true); // true or false'],
            'input_fc_form_tag_headline' => ['$comments->setFormHeadlineTag("h1"); // can be any tag'],
            'input_fc_form_headline' => ['$comments->setFormHeadlineText("My form headline");'],
            'input_fc_comments_tag_headline' => ['$comments->setListHeadlineTag("h1"); // can be any tag'],
            'input_fc_comments_headline' => ['$comments->setListHeadlineText("My comment list headline");'],
            'input_fc_counter' => ['$comments->hideCharacterCounter(true); // true or false'],
            'input_fc_privacy_show' => ['$comments->setPrivacyType(1); // 0 = none, 1 = checkbox, 2 = text'],
            'input_fc_captcha' => ['$comments->setCaptchaType("none"); // inherit, none, DefaultImageCaptcha, DefaultTextCaptcha, EvenCharacterTextCaptcha, ReverseTextCaptcha, SimpleMathTextCaptcha, SimpleQuestionCaptcha, SliderCaptcha'],
            'input_fc_pagnumber' => ['$comments->setPaginationNumber(10);'],
            'input_fc_pagorientation' => ['$comments->setPaginationAlignment("right"); // left, right, center'],
            'input_fc_stars' => ['$comments->showStarRating(2); // 0 = disabled 1 = optional, 2 = required'],
            'input_fc_moderate' => ['$comments->setModeration(2); // 0 = no moderation 1 = every comment will be moderated, 2 = only new comments will be moderated'],
            'input_removeFrontendCommentsJS' => ['$comments->removeJS(false); // true = JS is disabled, false = JS is enabled'],
            'input_removeFrontendCommentsCSS' => ['$comments->removeCSS(false); // true = CSS is disabled, false = CSS is enabled'],
            'input_fc_reply_depth' => ['$comments->setReplyDepth(1); // must be 0 or higher'],
            'input_fc_vote' => ['$comments->showVoting(true); // true, false'],
            'input_fc_sort' => ['$comments->sortNewestToOldest(true); // true, false'],
            'input_fc_dateformat' => ['$comments->setDateFormat(1); // 0 = full date, 1 = relative date'],
            'input_fc_emailTemplate' => ['$comments->setEmailTemplate("template_4.html");'],
            'input_fc_default_to' => ['$comments->setModerationEmail("email1@mydomain.com,email2@mydomain.com"); // add one or more email addresses as comma separated string'],
            'input_fc_comment_notification' => ['$comments->setReplyNotification(1); // 0, 1 or 2'],
            'input_fc_status_change_notification' => ['$comments->setStatusChangeNotification(["1","2"]); // can contain only 1 or 2'],
            'input_fc_from' => ['$comments->setSenderEmailAddress("myemailaddress@example.com");'],
            'input_fc_from_name' => ['$comments->setSenderName("ProcessWire");'],
            'input_fc_showWebsite' => ['$comments->showWebsiteField(false); // true or false'],
            'input_fc_loggedin_only' => ['$comments->setLoginRequired(false); // true or false'],
            'input_fc_showtooltip' => ['$comments->disableTooltip(true); // true or false'],

        ];
        if (!array_key_exists($field->name, $fields)) {
            return;
        }
        $field->entityEncodeText = false;
        $field->notes .= $this->createAdditionalNotesText($fields[$field->name]);
    }

    /**
     * Return the database schema that defines a comment
     *
     * @param Field $field
     * @return array
     * @throws WireException
     */
    public function getDatabaseSchema(Field $field): array
    {

        $schema = parent::getDatabaseSchema($field);

        $schema['id'] = "int unsigned NOT NULL auto_increment";
        $schema['status'] = "tinyint(3) NOT NULL default 0";
        $schema['author'] = "varchar(128) NOT NULL default ''";
        $schema['email'] = "varchar(255) NOT NULL default ''";
        $schema['website'] = "varchar(255) default NULL";
        $schema['data'] = "text NOT NULL default ''";
        $schema['created'] = "int unsigned NOT NULL";
        $schema['sort'] = "int unsigned NOT NULL default 0";
        $schema['user_id'] = "int unsigned NOT NULL default 40"; // set guest as the default user
        $schema['ip'] = "varchar(15) NOT NULL default ''";
        $schema['user_agent'] = "varchar(255) NOT NULL default ''";
        $schema['parent_id'] = "int unsigned NOT NULL default 0";
        $schema['code'] = "varchar(128) NOT NULL default ''";
        $schema['remote_flag'] = "tinyint(3) NOT NULL default 0";
        $schema['notification'] = "tinyint(3) NOT NULL default 0";
        $schema['stars'] = "tinyint(3) unsigned default NULL";
        $schema['upvotes'] = "int unsigned default 0";
        $schema['downvotes'] = "int unsigned default 0";
        $schema['spam_update'] = "int unsigned default NULL";
        $schema['moderation_feedback'] = "text NOT NULL default ''";

        // indexes, for any fields that need to be searchable from selectors
        $schema['keys']['primary'] = "PRIMARY KEY (`id`)";
        $schema['keys']['pages_id_sort'] = "KEY `pages_id_sort` (`pages_id`, `sort`)";
        $schema['keys']['status'] = "KEY `status` (`status`, `email`)";
        $schema['keys']['pages_id'] = "KEY `pages_id` (`pages_id`,`status`,`created`)";
        $schema['keys']['created'] = "KEY `created` (`created`, `status`)";
        $schema['keys']['spam'] = "KEY `spam_update` (`spam_update`, `status`)";
        $schema['keys']['data'] = "FULLTEXT KEY `data` (`data`)";
        $schema['keys']['code'] = "KEY `code` (`code`, `status`)";

        // create a table for storing the up- and down-votes user data (user id, browser, date/time,...)
        // This table is for checking if a user has voted within a given time period
        if (!$this->database->tableExists("{$field->getTable()}_votes")) {

            $sql = '
            CREATE TABLE ' . $field->getTable() . '_votes (
                id int unsigned NOT NULL auto_increment,
                field_id int unsigned NOT NULL,
                page_id int unsigned NOT NULL,
                comment_id int unsigned NOT NULL,
                vote tinyint NOT NULL,
                created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                ip varchar(15) NOT NULL default "",
                user_id int unsigned NOT NULL default 0,
                user_agent varchar(255) NOT NULL,
                PRIMARY KEY (id),
                INDEX created (created)
            )
            ';

            $this->database->exec($sql);
        }

        return $schema;
    }

    /**
     * Return the Inputfield used to collect input for a field of this type
     *
     * @param Page $page
     * @param Field $field
     * @return _Module|Inputfield|Module|null
     * @throws WirePermissionException
     */
    public function getInputfield(Page $page, Field $field): null|_Module|Inputfield|Module
    {
        return $this->modules->get('InputfieldFrontendComments');
    }

    /**
     * Return a blank ready-to-populate value
     *
     * @param Page $page
     * @param Field $field
     * @return FrontendCommentArray
     * @throws WireException
     */
    public function getBlankValue(Page $page, Field $field): FrontendCommentArray
    {
        $commentArray = $this->wire(new FrontendCommentArray());
        $commentArray->setPage($page);
        $commentArray->setField($field);
        $commentArray->setTrackChanges(Wire::trackChangesValues); // enable tracking of changes
        return $commentArray;
    }

    /**
     * Get a specific comment by its ID
     * @param Page $page
     * @param Field $field
     * @param int $id
     * @return Comment|null
     * @throws WireException
     */
    public function getCommentByID(Page $page, Field $field, int $id): FrontendComment|null
    {
        $pages = $this->wire()->pages;
        if (empty($id)) return null;

        $page = $pages->get((int)$page);
        if (!$page->id) return null;

        $field = $this->wire()->fields->get($this->wire()->sanitizer->fieldName($field));

        if (!$field || !$field->type instanceof FieldtypeFrontendComments) return null;
        $table = $field->getTable();
        $sql = "SELECT * FROM `$table` WHERE id=:id ";
        if ($page) $sql .= "AND pages_id=:pageID";
        $query = $this->wire()->database->prepare($sql);
        $query->bindValue(':id', $id, PDO::PARAM_INT);
        if ($page) $query->bindValue(':pageID', $page->id, PDO::PARAM_INT);
        if (!$query->execute()) return null;
        if (!$query->rowCount()) return null;
        $data = $query->fetch(PDO::FETCH_ASSOC);
        if (!$page) {
            $page = $pages->get((int)$data['pages_id']);
        }
        return $this->makeComment($page, $field, $data);
    }

    /**
     * Create a new FrontendComment object
     * @param $page
     * @param $field
     * @param array $data
     * @return FrontendComment
     * @throws WireException
     */
    protected function makeComment($page, $field, array $data): FrontendComment
    {

        $comments = $this->getBlankValue($page, $field);
        /** @var Comment $comment */
        $comment = $this->wire(new FrontendComment($comments, $data, $this->frontendFormsConfig));
        $comment->page = $page;
        $comment->field = $field;

        foreach ($data as $key => $val) {
            if ($key === 'data') {
                $key = 'text';
            }
            $comment->set($key, $val);
        }

        $comment->resetTrackChanges();
        return $comment;
    }

    /**
     * Given a value, make it clean and of the correct type for storage within a Page
     *
     * @param Page $page
     * @param Field $field
     * @param FrontendComments $value
     * @return FrontendCommentArray
     * @throws WireException
     */
    public function sanitizeValue(Page $page, Field $field, $value): FrontendCommentArray
    {
        // if given an invalid value, return a valid blank value
        if (!$value instanceof FrontendCommentArray) return $this->getBlankValue($page, $field);
        return $value;
    }

    /**
     * Check if a class with a specific name exists (with or without a namespace)
     * @param string $classname
     * @param string $namespace
     * @return string|bool
     */
    public static function checkForClass(string $classname, string $namespace = ''): string|bool
    {

        $framework_name = (self::getFrameWork() == 'None') ? '' : self::getFramework();

        if ($namespace != '') {
            $namespace = '\\' . $namespace . '\\';
        }
        $class = $namespace . $classname . $framework_name;
        if (!class_exists($class)) {
            $class = $namespace . $classname;
        }
        return $class;
    }

    /**
     * Find all parents of an ID
     * @param int $parent_id
     * @param array $parents
     * @return array
     */
    public function findParents(int $parent_id, array $parents = []): array
    {
        if (!$parents)
            $parents = [];
        if ($parent_id == 0) {
            $parents[] = 0;
        } else {
            $this->findParents($parent_id, $parents);
        }
        return $parents;
    }

    /**
     * Get the comments from the database
     * @param Page $page
     * @param Field $field
     * @param $value
     * @return FrontendCommentArray
     * @throws WireException
     */
    public function ___wakeupValue(Page $page, Field $field, $value): FrontendCommentArray
    {

        // if value ist type of FrontendCommentArray -> return it
        if ($value instanceof FrontendCommentArray) return $value;

        // if no Comment Array value is present ->
        // instantiate a new object with blank values if no value is present
        $commentArray = $this->getBlankValue($page, $field);

        if (empty($value)) return $commentArray;

        if (!is_array($value)) $value = [$value];

        $comment_class = self::checkForClass('FrontendComment', 'FrontendComments');
        $frontendFormsConfig = self::getFrontendFormsConfigValues();

        // create new comment objects from each item in the array
        foreach ($value as $item) {

            if (!is_array($item)) continue;

            $comment = $this->wire(new $comment_class($commentArray, $item, $frontendFormsConfig));
            $comment->setTrackChanges(Wire::trackChangesValues); // track all values of this comment
            $comment->set('pages_id', $page->id);
            // add every comment independent of the status to the commentArray
            $commentArray->add($comment);

        }

        return $commentArray;
    }

    /**
     * Prepare the comments for storage in the database
     * @param Page $page
     * @param Field $field
     * @param $value
     * @return array
     * @throws WireException
     */
    public function ___sleepValue(Page $page, Field $field, $value): array
    {
        $sleepValue = [];
        if (!$value instanceof WireArray) return $sleepValue;

        $sanitizer = $this->wire()->sanitizer;

        // convert each Comment to an array within sleepValue
        foreach ($value as $comment) {

            // sanitize especially values that will be submitted via the form
            $a = array(
                'id' => $comment->id,
                'status' => $sanitizer->int($comment->status),
                'data' => $sanitizer->textarea($comment->text),
                'author' => $sanitizer->maxLength($comment->author, 128, 128 * 3),
                'email' => $sanitizer->maxLength($comment->email, 255, 128 * 3),
                'website' => $sanitizer->maxLength($comment->website, 255, 128 * 3),
                'user_id' => $comment->user_id,
                'parent_id' => $sanitizer->int($comment->parent_id),
                'ip' => $comment->ip,
                'user_agent' => $comment->user_agent,
                'code' => $comment->code,
                'remote_flag' => $comment->remote_flag,
                'notification' => $comment->notification,
                'created' => $comment->created,
                'stars' => $comment->stars,
                'upvotes' => $comment->upvotes,
                'downvotes' => $comment->downvotes,
                'spam_update' => $comment->spam_update,
                'moderation_feedback' => $sanitizer->string($comment->moderation_feedback)
            );

            $sleepValue[] = $a;

        }

        return $sleepValue;
    }

    /**
     * Get the name of the framework
     * @return string
     */
    public static function getFrameWork(): string
    {
        return ucfirst(pathinfo(self::getFrontendFormsConfigValues()['input_framework'], PATHINFO_FILENAME));
    }

    /**
     * Get all fields inside the user template which can be selected to map form fields.
     * Please note: Only user fields, which are editable by the user, will be taken into account
     * @return array - key: field ID, value: field name
     * @throws WireException
     * @throws WirePermissionException
     */
    protected function getUserFields(): array
    {
        // get array of all editable user template fields

        $fields = $this->wire('modules')->getModule('ProcessProfile', ['noPermissionCheck' => true]);
        $all_userfields = $fields->data['profileFields'];
        // ignore these fields from the user template
        $ignoreFields = ['pass', 'roles', 'language', 'admin_theme', 'tfa_type'];
        $userfields = array_diff($all_userfields, $ignoreFields);
        $linkFields = [];
        $linkFields['none'] = $this->_('none');
        foreach ($userfields as $fieldname) {
            $field = $this->wire('fields')->get($fieldname);
            $linkFields[$field->id] = $field->name;
        }
        return $linkFields;
    }

    /**
     * Select user fields depending on the Fieldtype (class name)
     * @param string $classname
     * @return array
     * @throws WireException
     * @throws WirePermissionException
     */
    protected function getUserfieldsOfType(string $classname): array
    {
        $fields = [];
        foreach ($this->get('userfields') as $id => $name) {
            $field = $this->wire('fields')->get($id);
            if (isset($field->type)) {
                $fields['none'] = $this->_('no selection'); // add an empty option
                if ($field->type->className() === $classname) {
                    $fields[$id] = $name;
                }
            }
        }
        $this->set('userimagefields', $fields);
        return $fields;
    }

    /**
     * @throws WireException
     * @throws WirePermissionException
     */
    public static function getFieldConfigLangValue($field, string $propname): null|string
    {

        $text = $field->$propname;

        if (count(wire('languages')) > 1) {
            if (!wire('user')->get('language')->isDefault()) {
                $langID = wire('user')->get('language')->id;
                $propLangName = $propname . $langID;
                $text = $field->$propLangName ?? $field->$propname;
            }
        }

        return $text;
    }

    /**
     * @throws WireException
     * @throws WirePermissionException
     */
    public function ___getConfigInputfields(Field $field): InputfieldWrapper
    {
        // Get the defaults and $inputfields wrapper we can add to
        $inputfields = parent::___getConfigInputfields($field);

        $languages = $this->wire('languages');
        $modules = $this->wire()->modules;
        $this->set('userfields', $this->getUserFields());
        $userimages = $this->getUserfieldsOfType('FieldtypeImage');
        $websites = $this->getUserfieldsOfType('FieldtypeURL');
        $authornames = $this->getUserfieldsOfType('FieldtypeText');

        /**  $generalFieldset */
        $generalFieldset = $modules->get('InputfieldFieldset');
        $generalFieldset->set('label', $this->_('General settings'));
        $generalFieldset->set('collapsed', true);
        $generalFieldset->set('columnWidth', 100);
        $generalFieldset->set('icon', 'fa-cog');

        /** @var InputfieldRadios $moderate */
        $moderate = $modules->get('InputfieldRadios');
        $name = 'input_fc_moderate';
        $moderate->attr('name+id', $name);
        $moderate->set('value', $this->getConfigValue($field, $moderate));
        $moderate->addOption(self::moderateNone, $this->_('None - Comments posted immediately'));
        $moderate->addOption(self::moderateAll, $this->_('All - All comments must be approved by user with page edit access'));
        $moderate->addOption(self::moderateNew, $this->_('Only New - Only comments from users without prior approved comments require approval'));
        $moderate->set('label', $this->_('Comment moderation'));
        $moderate->set('description', $this->_('This determines when a newly posted comment will appear on your site.'));
        $generalFieldset->add($moderate);

        /** @var InputfieldCheckbox $quietsave */
        $quietsave = $modules->get('InputfieldCheckbox');
        $name = 'input_fc_quiet_save';
        $quietsave->attr('name+id', $name);
        $quietsave->attr('value', 1);
        $quietsave->attr('checked', $field->$name ? 'checked' : '');
        $quietsave->set('label', $this->_('Quiet save?'));
        $quietsave->set('description', $this->_('When checked, the page modification time and user will not be updated when a comment is added.'));
        $generalFieldset->add($quietsave);

        /** @var InputfieldCheckbox $only_logged_in */
        $onlyloggedin = $modules->get('InputfieldCheckbox');
        $name = 'input_fc_loggedin_only';
        $onlyloggedin->attr('name+id', $name);
        $onlyloggedin->attr('value', 1);
        $onlyloggedin->attr('checked', $field->$name ? 'checked' : '');
        $onlyloggedin->set('label', $this->_('Only logged in users can post comments'));
        $onlyloggedin->set('description', $this->_('When checked, only logged in users can post comments.'));
        $onlyloggedin->set('notes', $this->_('By default, all users can post comments.'));
        $generalFieldset->add($onlyloggedin);

        $inputfields->append($generalFieldset);

        /**  $confFieldset */
        $confFieldset = $modules->get('InputfieldFieldset');
        $confFieldset->set('label', $this->_('Form fields configuration'));
        $confFieldset->set('collapsed', true);
        $confFieldset->set('columnWidth', 100);
        $confFieldset->set('icon', 'fa-bars');

        /** @var InputfieldSelect $userimage */
        $userimage = $modules->get('InputfieldSelect');
        $name = 'input_fc_userimage';
        $userimage->attr('name+id', $name);
        //get all possible image fields from the user template
        $userimage->addOptions($userimages);
        $userimage->attr('value', $this->getConfigValue($field, $userimage));
        $userimage->required = 1;
        $userimage->set('entityEncodeText', false);
        $userimage->set('label', $this->_('Select a field for the user image'));
        $text = $this->_('Select a field from the user template that contains the user image.');
        if (count($userimages) < 2) {
            $text .= '<br><div class="notes">' . $this->_('At the moment, no user image fields were found in the user template. If you want to use this option, you must first add an image field to the user template.') . '</div>';
        }
        $userimage->set('description', $text);
        $userimage->set('notes', $this->_('Only user fields of the type "FieldtypeImage" are displayed, which only allow the upload of a single image.'));
        $confFieldset->add($userimage);

        /** @var InputfieldCheckbox $showWebsite */
        $showWebsite = $modules->get('InputfieldCheckbox');
        $name = 'input_fc_showWebsite';
        $showWebsite->attr('name+id', $name);
        $showWebsite->attr('value', $this->getConfigValue($field, $showWebsite));
        $showWebsite->attr('checked', $field->$name ? 'checked' : '');
        $showWebsite->set('columnWidth', 50);
        $showWebsite->set('label', $this->_('Add a website field to the comment form'));
        $showWebsite->set('description', $this->_('Here you can add an additional form field to the form, which allows the author to enter the URL to his website'));
        $showWebsite->set('notes', $this->_('The field will only be added to the form if the box is checked.'));
        $confFieldset->add($showWebsite);

        /** @var InputfieldSelect $website */
        $website = $modules->get('InputfieldSelect');
        $name = 'input_fc_website';
        $website->attr('name+id', $name);
        //get all possible website fields from the user template
        $website->addOptions($websites);
        $website->attr('value', $this->getConfigValue($field, $website));
        $website->set('required', true);
        $website->set('showIf', 'input_fc_showWebsite=1');
        $website->set('columnWidth', '50');
        $website->set('label', $this->_('Select the field for the website URL'));
        $website->set('entityEncodeText', false);
        $text = $this->_('Select the field of the user template which contains the website URL to the users homepage. The website field will be pre-filled with the value of this field if the user is logged in.');
        if (count($websites) < 2) {
            $text .= '<br><div class="notes">' . $this->_('At the moment, no fields were found in the user template that can be used as the website field. If you want to use this option, you must first add a new URL input field to the user template.') . '</div>';
        }
        $website->set('description', $text);
        $website->set('notes', $this->_('Only user fields of type "FieldtypeURL" are displayed.'));
        $confFieldset->add($website);

        /** @var InputfieldSelect $authorName */
        $authorName = $modules->get('InputfieldSelect');
        $name = 'input_fc_author';
        $authorName->attr('name+id', $name);
        //get all possible website fields from the user template
        $authorName->addOptions($authornames);
        $authorName->addOption('name', 'username');
        $authorName->attr('value', $this->getConfigValue($field, $authorName));
        $authorName->set('required', true);
        $authorName->set('label', $this->_('Select the field for the author name'));
        $authorName->set('entityEncodeText', false);
        $text = $this->_('Select the field of the user template which contains the author name. The author name field will be pre-filled with the value of this field if the user is logged in.');
        if (count($authornames) < 2) {
            $text .= '<br><div class="notes">' . $this->_('At the moment, no fields were found in the user template that can be used as a name field. If you want to use this option, you must first add a new text field to the user template. Otherwise the username will be used instead.') . '</div>';
        }
        $authorName->set('description', $text);
        $authorName->set('notes', $this->_('Only user fields of type "FieldtypeText" are displayed.'));
        $confFieldset->add($authorName);

        $inputfields->add($confFieldset);

        /**  $emailFieldset */
        $emailFieldset = $modules->get('InputfieldFieldset');
        $emailFieldset->set('label', $this->_('Default email configuration'));
        $emailFieldset->set('collapsed', true);
        $emailFieldset->set('columnWidth', 100);
        $emailFieldset->set('icon', 'fa-envelope');

        // choose whether to use an email template or not
        if ($this->frontendForms->getEmailTemplates()) {

            /** @var InputfieldSelect $emailTemplate */
            $emailTemplate = $modules->get('InputfieldSelect');
            $name = 'input_fc_emailTemplate';
            $emailTemplate->attr('name+id', $name);
            $emailTemplate->attr('class', 'ff-imagepicker');
            // create options
            $this->frontendForms->createEmailTemplatesOptions($emailTemplate, true);
            $emailTemplate->attr('value', $this->getConfigValue($field, $emailTemplate));
            $emailTemplate->set('required', 1);
            $emailTemplate->set('label', $this->_('Select an email template'));
            $emailTemplate->set('description', $this->_('Select if you want to use a HTML template for the notification emails or not.'));
            $emailTemplate->set('notes', $this->_('Inherit from FrontendForms will take the setting from this module.'));
            $emailFieldset->add($emailTemplate);

        }

        /** @var InputfieldSelect $emailtype */
        $emailtype = $modules->get('InputfieldSelect');
        $name = 'input_fc_emailtype';
        $emailtype->attr('name+id', $name);
        $emailtype->addOptions([
            'text' => $this->_('Enter email address(es) manually'),
            'pwfield' => $this->_('Select users as recipients')
        ]);

        $emailtype->attr('value', $this->getConfigValue($field, $emailtype));
        $emailtype->set('columnWidth', 50);
        $emailtype->set('required', 1);
        $emailtype->set('label', $this->_('Email address(es) for the notification email'));
        $emailtype->set('description', $this->_('Select, if you want to enter the receiver email address(es) for the notification mails manually or if you want to select users as recipients.'));
        $emailFieldset->add($emailtype);

        /** @var InputfieldEmail $email */
        // email address where the emails should be sent to (fe. noreply@mycompany.com)
        $email = $modules->get('InputfieldTextarea');
        $name = 'input_fc_default_to';
        $email->attr('name+id', $name);
        $email->attr('value', $field->$name);
        $email->set('columnWidth', 25);
        $email->set('showIf', 'input_fc_emailtype=text');
        $email->set('required', 1);
        $email->set('requiredIf', 'input_fc_emailtype=text');
        $email->set('label', $this->_('Default email address(es) as text'));
        $email->set('description', $this->_('Enter one or more emails (each on a new line) to which you want the notification emails to be sent.'));
        $email->set('notes', $this->_('Fe email1@mydomain.com'));
        $emailFieldset->add($email);

        /** @var InputfieldAsmSelect $emailField */
        // select one or more users as recipients
        // this field overwrites the text field for the email address
        $emailField = $modules->get('InputfieldAsmSelect');
        $name = 'input_fc_emailfield';
        $emailField->attr('name+id', $name);
        $emailField->set('required', 1);
        $emailField->set('requiredIf', 'input_fc_emailtype=pwfield');
        // create options that contain users (excluding all users with no page edit permission)
        $users = $this->wire('users')->find('roles!=registered,id!=40,sort=roles');
        $userFields = [];
        foreach ($users as $user) {
            if ($user->hasPermission('page-edit')) {
                $userFields[$user->email] = $user->name . ' [' . $user->email . ']';
            }
        }
        $emailField->addOptions($userFields);
        $emailField->attr('value', $field->$name);
        $emailField->set('label', $this->_('Recipients for the notification email'));
        $emailField->set('description', $this->_('Select one or more users that should receive a notification about new comments.'));
        $emailField->set('notes', $this->_('Only users with page edit permission will be displayed.'));
        $emailField->set('columnWidth', 25);
        $emailField->set('showIf', 'input_fc_emailtype=pwfield');
        $emailFieldset->add($emailField);

        /** @var InputfieldEmail $emailFrom */
        // enter the email address from where the emails should be sent (fe. no-reply@mycompany.com)
        $emailFrom = $modules->get('InputfieldEmail');
        $name = 'input_fc_from';
        $emailFrom->attr('name+id', $name);
        $emailFrom->attr('value', $field->$name); // no default value
        if ($languages) {
            $emailFrom->useLanguages = true;
            foreach ($languages as $language) {
                if ($language->isDefault()) continue;
                $emailFrom->attr("value$language", (string)$field->get($name . $language->id));
            }
        }
        $emailFrom->set('columnWidth', 50);
        $emailFrom->set('label', $this->_('From email address'));
        $emailFrom->set('description', $this->_('This email address will be displayed as the sender email address of the emails sent by this module.'));
        $emailFrom->set('notes', sprintf($this->_('If no email address will be entered, %s will be displayed instead as the sender address.'), '"' . $this->_('comment-notification') . '@' . $_SERVER["SERVER_NAME"] . '"'));
        $emailFieldset->add($emailFrom);

        /** @var InputfieldEmail $sender */
        // enter the sender of the emails (fe. My Company)
        $sender = $modules->get('InputfieldText');
        $name = 'input_fc_from_name';
        $sender->attr('name+id', $name);
        $sender->attr('value', $field->$name);
        if ($languages) {
            $sender->useLanguages = true;
            foreach ($languages as $language) {
                if ($language->isDefault()) continue;
                $sender->attr("value$language", (string)$field->get($name . $language->id));
            }
        }
        $sender->set('placeholder', $this->_('fe. My company'));
        $sender->set('label', $this->_('From name'));
        $sender->set('description', $this->_('This name will be displayed as the sender name of the emails sent by this module.'));
        $sender->set('notes', $this->_('If no sender name will be entered, than the sender email address will be used as the sender name.'));
        $sender->set('columnWidth', 50);
        $emailFieldset->add($sender);

        /** @var InputfieldRadios $notification */
        $notification = $modules->get('InputfieldRadios');
        $name = 'input_fc_comment_notification';
        $notification->attr('name+id', $name);
        $notification->addOption(0, $this->_('Disabled'));
        $notification->addOption(FrontendComment::flagNotifyReply, $this->_('Users can receive email notifications of replies to their comment only'));
        $notification->addOption(FrontendComment::flagNotifyAll, $this->_('Users can receive email notifications for all new comments on the page'));
        $notification->attr('value', $this->getConfigValue($field, $notification));
        $notification->set('label', $this->_('Sending notification mails to the author of a comment'));
        $notification->set('description', $this->_('Send comment authors email notifications of new comments.'));
        $emailFieldset->add($notification);

        /** @var InputfieldCheckboxes $statusnotification */
        $statusnotification = $modules->get('InputfieldCheckboxes');
        $name = 'input_fc_status_change_notification';
        $statusnotification->attr('name+id', $name);
        $statusnotification->addOption(FieldtypeFrontendComments::approved, sprintf($this->_('Send notification email if status has been changed to approved'), FieldtypeFrontendComments::statusTexts()[FieldtypeFrontendComments::approved]));
        $statusnotification->addOption(FieldtypeFrontendComments::spam, sprintf($this->_('Send notification email if status has been changed to SPAM'), FieldtypeFrontendComments::statusTexts()[FieldtypeFrontendComments::approved]));
        $statusnotification->attr('value', $this->getConfigValue($field, $statusnotification));
        $statusnotification->set('label', $this->_('Send a notification email to the author of a comment on status change'));
        $statusnotification->set('description', $this->_('If a moderator changes the status of a comment, select on which status change the author should be informed via email.'));
        $statusnotification->set('notes', $this->_('If a box is checked, the commenter will receive an email if the comment status will be changed by a moderator in the backend or via email link. You can disable the sending of emails by unchecking a box.'));
        $emailFieldset->add($statusnotification);

        $inputfields->append($emailFieldset);

        $fieldset = $modules->get('InputfieldFieldset');
        $fieldset->set('label', $this->_('Output rendering'));
        $fieldset->set('collapsed', 1);// by default, this fieldset should be collapsed
        $fieldset->set('description', $this->_('Change some parameters to get the preferred output.'));
        $fieldset->set('icon', 'fa-code');

        /**  $generalFieldset */
        $generalFieldset = $modules->get('InputfieldFieldset');
        $generalFieldset->set('label', $this->_('General output settings'));
        $generalFieldset->set('collapsed', true);
        $generalFieldset->set('columnWidth', 100);
        $generalFieldset->set('icon', 'fa-cog');

        /** @var InputfieldCheckbox $reverse */
        // field to reverse the output order of form and comments
        $reverse = $this->modules->get('InputfieldCheckbox');
        $name = 'input_fc_reverse_output';
        $reverse->attr('name+id', $name);
        $reverse->attr('value', $this->getConfigValue($field, $reverse));
        $reverse->attr('checked', $field->$name ? 'checked' : '');
        $reverse->set('label', $this->_('Output order'));
        $reverse->set('label2', $this->_('Show form after comments'));
        $reverse->set('description', $this->_('Reverse the order of the output of the comment form and the comments.'));
        $reverse->set('notes', $this->_('By default, the form will be displayed before the comments. To reverse this behavior, select this check box.'));
        $generalFieldset->append($reverse);

        $fieldset->append($generalFieldset);

        /**  $commentformFieldset */
        $formFieldset = $modules->get('InputfieldFieldset');
        $formFieldset->set('label', $this->_('Comment form settings'));
        $formFieldset->set('collapsed', true);
        $formFieldset->set('columnWidth', 100);
        $formFieldset->set('icon', 'fa-pencil');

        /**  InputfieldText $formHead */
        // enter the headline of the comment list
        $formHead = $modules->get('InputfieldText');
        $name = 'input_fc_form_headline';
        $formHead->attr('name+id', $name);
        $formHead->attr('value', $field->$name);
        $disableFormHead = $this->_('To disable the display of the default heading, enter "none" inside the input field.');
        if ($languages) {
            $formHead->set('useLanguages', true);
            foreach ($languages as $language) {
                if ($language->isDefault()) continue;
                $formHead->attr("value$language", (string)$field->get($name . $language->id));
            }
            if ($languages->count() > 1)
                $disableFormHead = $this->_('To disable the display of the default heading, enter "none" inside the input field of the default language.');
        }
        $formHead->set('description', $this->_('This heading appears at the top of the comment form.'));
        $formHead->set('columnWidth', 100);
        $formHead->set('label', $this->_('Form headline'));
        $formHead->set('notes', $this->_('If no heading is entered, "Leave a comment" will be displayed as the default heading.') . ' ' . $disableFormHead);
        $formFieldset->add($formHead);

        /**  InputfieldText $formTagHead */
        // Set the tag for the headline of the comment form
        $formTagHead = $this->wire()->modules->get('InputfieldSelect');
        $name = 'input_fc_form_tag_headline';
        $formTagHead->attr('name+id', $name);
        $options = [
            'h1' => $this->_('Headline 1'),
            'h2' => $this->_('Headline 2'),
            'h3' => $this->_('Headline 3'),
            'h4' => $this->_('Headline 4'),
            'h5' => $this->_('Headline 5')
        ];
        $formTagHead->addOptions($options);
        $formTagHead->attr('value', $this->getConfigValue($field, $formTagHead));
        $formTagHead->set('label', $this->_('Headline type for the form heading'));
        $formTagHead->set('description', $this->_('Select the type of the form heading (from h1 to h5).'));
        $formTagHead->set('required', true);
        $formFieldset->append($formTagHead);

        /**  InputfieldSelect $starrating */
        // field to show or hide the star rating
        $starrating = $this->modules->get('InputfieldSelect');
        $name = 'input_fc_stars';
        $starrating->attr('name+id', $name);
        $starrating->attr('value', $this->getConfigValue($field, $starrating));
        $options = [
            $this->_('Disabled'),
            $this->_('Yes (star rating optional)'),
            $this->_('Yes (star rating required)')
        ];
        $starrating->addOptions($options);
        $starrating->set('label', $this->_('Use star rating'));
        $starrating->set('description', $this->_('Please select, if you want to offer a star rating.'));
        $formFieldset->append($starrating);

        /**  InputfieldCheckbox $tooltip */
        // field to hide the tooltip next to the star rating
        $tooltip = $this->modules->get('InputfieldCheckbox');
        $name = 'input_fc_showtooltip';
        $tooltip->attr('name+id', $name);
        $tooltip->attr('value', $field->$name);
        $tooltip->attr('checked', $field->$name ? 'checked' : '');
        $tooltip->set('label', $this->_('Disable tooltip next to the star rating'));
        $tooltip->set('label2', $this->_('Disable the display of the tooltip beside the star rating'));
        $tooltip->set('description', $this->_('By default, a tooltip showing the current rating on hover, will be displayed next to the star rating. Check the checkbox to hide the tooltip.'));
        $tooltip->set('showIf', 'input_fc_stars=1|2');
        $formFieldset->append($tooltip);

        /**  InputfieldCheckbox $counter */
        // field to show or hide the character counter under the comment text field
        $counter = $this->modules->get('InputfieldCheckbox');
        $name = 'input_fc_counter';
        $counter->attr('name+id', $name);
        $counter->attr('value', $field->$name);
        $counter->attr('checked', $field->$name ? 'checked' : '');
        $counter->set('label', $this->_('Show/hide character counter under the textarea field'));
        $counter->set('label2', $this->_('Hide character counter'));
        $counter->set('description', $this->_('By default, a character counter will be displayed under the comment text field to inform the user, how many characters are left until the max. limit of 1024 characters is reached.'));
        $formFieldset->append($counter);

        /**  InputfieldSelect $privacy_show */
        // Show or hide privacy checkbox or text on the form
        $privacy_show = $this->wire()->modules->get('InputfieldSelect');
        $name = 'input_fc_privacy_show';
        $privacy_show->attr('name+id', $name);
        $options = [
            $this->_('Do not show anything'),
            $this->_('Show checkbox'),
            $this->_('Show text')
        ];
        $privacy_show->addOptions($options);
        $privacy_show->attr('value', $this->getConfigValue($field, $privacy_show));
        $privacy_show->set('label', $this->_('Add privacy text or privacy checkbox to the form'));
        $privacy_show->set('description', $this->_('Choose whether you want to display a privacy text or checkbox above the "Submit" button, or nothing at all.'));
        $privacy_show->set('notes', $this->_('You can disable the display of the privacy text/checkbox, but you should be aware that this may lead to legal consequences if a privacy notice is required in your country.'));
        $formFieldset->append($privacy_show);

        /**  InputfieldSelect showLinkGuidelines */
        $showLinkGuidelines = $this->wire()->modules->get('InputfieldSelect');
        $name = 'input_guidelines_type';
        $showLinkGuidelines->attr('name+id', $name);
        $options = [
            $this->_('None'),
            $this->_('Internal page'),
            $this->_('External page')
        ];
        $showLinkGuidelines->addOptions($options);
        $showLinkGuidelines->attr('value', $this->getConfigValue($field, $showLinkGuidelines));
        $showLinkGuidelines->set('columnWidth', 50);
        $showLinkGuidelines->set('label', $this->_('Show a link to the community guidelines'));
        $showLinkGuidelines->set('description', $this->_('Choose whether or not to display a link to the Community Guidelines. You can select an internal or external page.'));
        $formFieldset->append($showLinkGuidelines);

        /**  InputfieldPageAutocomplete $internalPage */
        $internalPage = $this->wire('modules')->get('InputfieldPageAutocomplete');
        $name = 'input_fc_internalPage';
        $internalPage->attr('name+id', $name);
        $internalPage->set('maxSelectedItems', 1);
        $internalPage->attr('value', $field->$name);
        $internalPage->set('showIf', 'input_guidelines_type=1');
        $internalPage->set('required', true);
        $internalPage->set('requiredIf', 'input_guidelines_type=1');
        $internalPage->set('columnWidth', 25);
        $internalPage->set('label', $this->_('Page for the Community Guidelines'));
        $internalPage->set('description', $this->_('Select the page that contains the Community Guidelines by entering a search term for the title of that page (e.g. guidelines).'));
        $internalPage->set('notes', $this->_('The link to this page will be displayed under the textarea input for the comment text.'));
        $formFieldset->append($internalPage);

        /**  InputfieldURL $externalPage */
        $externalPage = $this->wire('modules')->get('InputfieldURL');
        $name = 'input_fc_externalPage';
        $externalPage->attr('name+id', $name);
        $externalPage->attr('value', $field->$name);
        $externalPage->set('showIf', 'input_guidelines_type=2');
        $externalPage->set('required', true);
        $externalPage->set('requiredIf', 'input_guidelines_type=2');
        $externalPage->set('columnWidth', 25);

        // set multilanguage URL field if enabled
        if ($languages && $this->wire('modules')->isInstalled('FieldtypeURLLanguage')) {
            $externalPage->useLanguages = true;
            foreach ($languages as $language) {
                if ($language->isDefault()) continue;
                $externalPage->attr("value$language", (string)$field->get($name . $language->id));
            }
        }

        $externalPage->set('label', $this->_('External URL for the Community Guidelines'));
        $externalPage->set('description', $this->_('Enter the URL to an external page containing the Community Guidelines.'));
        $externalPage->set('notes', $this->_('The link to this page will be displayed under the textarea input for the comment text.'));
        $formFieldset->append($externalPage);

        $fieldset->append($formFieldset);

        /**  $commentlistFieldset */
        $commentFieldset = $modules->get('InputfieldFieldset');
        $commentFieldset->set('label', $this->_('Comment list settings'));
        $commentFieldset->set('collapsed', true);
        $commentFieldset->set('columnWidth', 100);
        $commentFieldset->set('icon', 'fa-list');

        /**  InputfieldText $commentHead */
        // enter the headline of the comment list
        $commentHead = $modules->get('InputfieldText');
        $name = 'input_fc_comments_headline';
        $commentHead->attr('name+id', $name);
        $commentHead->attr('value', $field->$name);
        $disableCommentHead = $this->_('To disable the display of the heading enter "none" inside the input field.');
        if ($languages) {
            $commentHead->set('useLanguages', true);
            foreach ($languages as $language) {
                if ($language->isDefault()) continue;
                $commentHead->attr("value$language", (string)$field->get($name . $language->id));
            }
            if ($languages->count() > 1)
                $disableCommentHead = $this->_('To disable the display of the heading enter "none" inside the input field of the default language.');
        }
        $commentHead->set('columnWidth', 100);
        $commentHead->set('label', $this->_('Comment list headline'));
        $commentHead->set('description', $this->_('This heading appears at the top of the comment list.'));
        $commentHead->set('notes', $this->_('If no heading is entered, "Comments" will will be displayed as the default heading.') . ' ' . $disableCommentHead);
        $commentFieldset->add($commentHead);

        /**  InputfieldSelect $commentsTagHead */
        // Set the tag for the headline of the comments
        $commentsTagHead = $this->wire()->modules->get('InputfieldSelect');
        $name = 'input_fc_comments_tag_headline';
        $commentsTagHead->attr('name+id', $name);
        $options = [
            'h1' => $this->_('Headline 1'),
            'h2' => $this->_('Headline 2'),
            'h3' => $this->_('Headline 3'),
            'h4' => $this->_('Headline 4'),
            'h5' => $this->_('Headline 5')
        ];
        $commentsTagHead->addOptions($options);
        $commentsTagHead->attr('value', $this->getConfigValue($field, $commentsTagHead));
        $commentsTagHead->set('required', true);
        $commentsTagHead->set('label', $this->_('Headline type for the comments heading'));
        $commentsTagHead->set('description', $this->_('Select the type of the comments heading (from h1 to h5).'));
        $commentFieldset->append($commentsTagHead);

        /**  InputfieldInteger $replyDepth */
        // field to enter the number of decimals (fe 2) -> will be appended after the inputfield
        $replyDepth = $this->modules->get('InputfieldInteger');
        $name = 'input_fc_reply_depth';
        $replyDepth->attr('name+id', $name);
        $replyDepth->attr('type', 'number');
        $replyDepth->attr('value', $this->getConfigValue($field, $replyDepth));
        $replyDepth->attr('size', 10);
        $replyDepth->attr('min', 0);
        $replyDepth->attr('max', 10);
        $replyDepth->set('required', true);
        $replyDepth->set('columnWidth', 50);
        $replyDepth->set('label', $this->_('Reply depth'));
        $replyDepth->set('description', $this->_('Choose the number of depth for threaded comments.'));
        $replyDepth->set('notes', $this->_('Specify 0 for traditional flat chronological comments. For threaded comments (replies appear with comment being replied to) specify the maximum depth allowed for replies (0 to 3 recommended).'));
        $commentFieldset->append($replyDepth);

        /**  InputfieldCheckbox $sort */
        // field to enter the number of decimals (fe 2) -> will be appended after the inputfield
        $sort = $this->modules->get('InputfieldCheckbox');
        $name = 'input_fc_sort';
        $sort->attr('name+id', $name);
        $sort->attr('value', $field->$name);
        $sort->attr('checked', $field->get('input_fc_sort') ? 'checked' : '');
        $sort->set('columnWidth', 50);
        $sort->set('label', $this->_('Sort order'));
        $sort->set('label2', $this->_('Sort newest to oldest'));
        $sort->set('description', $this->_('Set the sort order for the comments.'));
        $sort->set('notes', $this->_('By default, comments will be sort chronologically (oldest to newest). To reverse that behavior check this box. Just to mention: This affects only main comments, but not replies to comments.'));
        $commentFieldset->append($sort);

        /**  InputfieldCheckbox $vote */
        // field to show or hide a comment rating
        $vote = $this->modules->get('InputfieldCheckbox');
        $name = 'input_fc_vote';
        $vote->attr('name+id', $name);
        $vote->attr('value', $field->$name);
        $vote->attr('checked', $field->$name ? 'checked' : '');
        $vote->set('columnWidth', 50);
        $vote->set('label', $this->_('Show/hide voting of comments'));
        $vote->set('label2', $this->_('Enable voting of comments'));
        $vote->set('description', $this->_('By checking the box you offer visitors the possibility to rate comments (up-votes and down-votes).'));
        $commentFieldset->append($vote);

        /**  InputfieldCheckbox $voting_lock */
        $voting_lock = $this->modules->get('InputfieldInteger');
        $name = 'input_fc_voting_lock';
        $voting_lock->attr('name+id', $name);
        $voting_lock->attr('type', 'number');
        $voting_lock->attr('value', $this->getConfigValue($field, $voting_lock));
        $voting_lock->attr('size', 10);
        $voting_lock->attr('min', 1);
        $voting_lock->set('required', true);
        $voting_lock->set('columnWidth', 50);
        $voting_lock->set('label', $this->_('Number of days before voting can be done again'));
        $voting_lock->set('description', $this->_('To prevent multiple ratings from the same user, this module checks if the user have voted before. Please enter a time period in days during which further rating is not allowed.'));
        $voting_lock->set('notes', $this->_('The user will be identified by using data of his Internet fingerprint. This means that the IP address, the browser system and the user ID will be compared with entries in the database. If an entry with the same data will be found, then the rating is not allowed. Entries in the database which are older than the time period selected above will be deleted automatically and the user will be allowed to rate again.'));
        $commentFieldset->append($voting_lock);

        /**  InputfieldSelect $dateformat */
        $dateformat = $this->wire()->modules->get('InputfieldSelect');
        $name = 'input_fc_dateformat';
        $dateformat->attr('name+id', $name);
        $options = [
            $this->_('full date'),
            $this->_('relative')
        ];
        $dateformat->addOptions($options);
        $dateformat->attr('value', $this->getConfigValue($field, $dateformat));
        $dateformat->set('label', $this->_('Date/time format for comments'));
        $dateformat->set('description', $this->_('Select if you want to show the date/time of a comment as a full or a relative date string.'));
        $dateformat->set('notes', $this->_('The format of a full date string can be defined in the configuration of the FrontendForms module.'));
        $commentFieldset->append($dateformat);

        $fieldset->append($commentFieldset);

        $fieldsetAssets = $this->wire('modules')->get('InputfieldFieldset');
        $fieldsetAssets->set('label', $this->_('Settings for stylesheets and scripts'));
        $fieldsetAssets->set('collapsed', 1);
        $fieldsetAssets->set('icon', 'fa-code');

        /**  InputfieldCheckbox $removeJS */
        // Remove JS on Frontend
        $removeJS = $this->wire('modules')->get('InputfieldCheckbox');
        $name = 'input_removeFrontendCommentsJS';
        $removeJS->attr('name+id', $name);
        $removeJS->attr('value', 1);
        $removeJS->attr('checked', $field->$name === 1 ? 'checked' : '');
        $removeJS->set('columnWidth', 50);
        $removeJS->set('label', $this->_('Javascript setting'));
        $removeJS->set('label2', $this->_('Remove all Javascript files for the comments from the frontend'));
        $removeJS->set('notes', $this->_('All JavaScript files, which will be needed for some features of the comments, will added before the closing body tag on the frontend by default . You can prevent the embedding of the JS files by checking the box.'));

        $fieldsetAssets->add($removeJS);

        /**  InputfieldCheckbox $removeCSS */
        // Remove CSS on Frontend
        $removeCSS = $this->wire('modules')->get('InputfieldCheckbox');
        $name = 'input_removeFrontendCommentsCSS';
        $removeCSS->attr('name', $name);
        $removeCSS->attr('checked', $field->$name == 1 ? 'checked' : '');
        $removeCSS->set('columnWidth', 50);
        $removeCSS->set('label', $this->_('CSS setting'));
        $removeCSS->set('label2', $this->_('Remove all CSS files for the comments from the frontend'));
        $removeCSS->set('notes', $this->_('All CSS files for the comments will be added to the head section by default. You can prevent the embedding of the CSS files by checking the box.'));

        $fieldsetAssets->add($removeCSS);

        $fieldset->add($fieldsetAssets);

        $inputfields->append($fieldset);

        /**  $spamFieldset */
        $spamFieldset = $modules->get('InputfieldFieldset');
        $spamFieldset->set('label', $this->_('Spam protection'));
        $spamFieldset->set('collapsed', true);
        $spamFieldset->set('columnWidth', 100);
        $spamFieldset->set('icon', 'fa-ban');

        /**  InputfieldInteger $spam */
        // field to enter the number of decimals (fe 2) -> will be appended after the inputfield
        $spam = $this->modules->get('InputfieldInteger');
        $name = 'input_fc_spam';
        $spam->attr('name+id', $name);
        $spam->attr('type', 'number');
        $spam->attr('value', $this->getConfigValue($field, $spam));
        $spam->attr('size', 10);
        $spam->attr('min', 0);
        $spam->set('required', true);
        $spam->set('label', $this->_('Number of days after which to delete spam'));
        $spam->set('description', $this->_('After the specified number of days has elapsed, comments that have been marked as spam will be automatically deleted.'));
        $spam->set('notes', $this->_('If you want to disable automatic spam deletion, please select 0.'));
        $spamFieldset->append($spam);

        /**  InputfieldSelect $captcha */
        $captcha = $modules->get('InputfieldSelect');
        $name = 'input_fc_captcha';
        $captcha->attr('name+id', $name);
        // grab CAPTCHA types from the FrontendForms module
        $modulePath = $this->wire('config')->get('paths')->siteModules . 'FrontendForms/';
        $captchaTypes = $this->wire('files')->find($modulePath . 'Formelements/Captcha/variants/',
            ['recursive' => 0]);
        $captcha->addOption('inherit', $this->_('Inherit from FrontendForms'));
        $captcha->addOption('none', $this->_('No CAPTCHA'));
        foreach ($captchaTypes as $file) {
            $className = pathinfo($file, PATHINFO_FILENAME);
            $cname = 'FrontendForms\\' . $className;
            $option = $this->wire(new $cname());
            $captcha->addOption($className, $option->title);
        }
        $captcha->attr('value', $this->getConfigValue($field, $captcha));
        $captcha->set('required', 1);
        $captcha->set('label', $this->_('CAPTCHA'));
        $captcha->set('description', $this->_('Select, if you want to use a CAPTCHA for the comment form.'));
        $captcha->set('notes', $this->_('If you receive a lot of spam comments, you can enable a CAPTCHA to prevent spam bots from filling out the form.'));
        $spamFieldset->add($captcha);

        $inputfields->append($spamFieldset);

        /**  $paginationFieldset */
        $paginationFieldset = $modules->get('InputfieldFieldset');
        $paginationFieldset->set('label', $this->_('Pagination'));
        $paginationFieldset->set('collapsed', true);
        $paginationFieldset->set('columnWidth', 100);
        $paginationFieldset->set('icon', 'fa-list');

        /**  InputfieldInteger $paginationNumber */
        $paginationNumber = $modules->get('InputfieldInteger');
        $name = 'input_fc_pagnumber';
        $paginationNumber->attr('name+id', $name);
        $paginationNumber->attr('value', $this->getConfigValue($field, $paginationNumber));
        $paginationNumber->set('columnWidth', 50);
        $paginationNumber->set('required', 1);
        $paginationNumber->set('label', $this->_('Set the number of comments per page'));
        $paginationNumber->set('description', $this->_('Enter how many comments should be displayed per page.'));
        $paginationNumber->set('notes', $this->_('A value of 0 disables the pagination and shows all comments on one page.'));
        $paginationFieldset->add($paginationNumber);

        /**  InputfieldInteger $paginationOrientation */
        $paginationOrientation = $this->wire()->modules->get('InputfieldSelect');
        $name = 'input_fc_pagorientation';
        $paginationOrientation->attr('name+id', $name);
        $options = [
            'left' => $this->_('left'),
            'center' => $this->_('center'),
            'right' => $this->_('right'),
        ];
        $paginationOrientation->addOptions($options);
        $paginationOrientation->attr('value', $this->getConfigValue($field, $paginationOrientation));
        $paginationOrientation->set('columnWidth', 50);
        $paginationOrientation->set('required', 1);
        $paginationOrientation->set('label', $this->_('Set the alignment of the pagination'));
        $paginationOrientation->set('description', $this->_('Choose whether you want the pagination to appear left, centered, or right.'));

        $paginationFieldset->add($paginationOrientation);

        $inputfields->append($paginationFieldset);

        /**  $docFieldset */
        $docFieldset = $this->wire('modules')->get('InputfieldFieldset');
        $docFieldset->set('label', $this->_('How to'));
        $docFieldset->set('icon', 'fa-question-circle');
        $docFieldset->set('description', $this->_('Here is how to implement the comments on a page.'));
        $docFieldset->set('collapsed', true);
        $docFieldset->set('columnWidth', 100);

        $text = '<p>' . $this->_('First, you will need to add this field to a template where you want to display comments.');
        $text .= '<br>' . $this->_('After that, put this code on a position inside this template, where the form and the comment list should be displayed.') . '</p>';
        $text .= '<h3>' . $this->_('The easiest way to integrate comments') . '</h3>';
        $text .= '<p>' . $this->_('In this case, the global settings are applied.') . '</p>';
        $text .= '<pre><code>echo $page->' . $field->name . '->render();</code></pre>';
        $text .= '<p>' . $this->_('Copy this line of code and add it to your template, where the comments should be displayed.') . '</p>';
        $text .= '<h3>' . $this->_('Integration of comments with user-defined settings per field') . '</h3>';
        $text .= '<p>' . $this->_('If needed, almost every parameter of the global settings can be overwritten within the templates.') . '</p>';
        $text .= '<pre><code>';
        $text .= '$comments = $page->' . $field->name . ';<br>';
        $text .= '$comments->setModeration(2);<br>';
        $text .= '$comments->setLoginRequired(true);<br>';
        $text .= '$comments->showWebsiteField(false);<br>';
        $text .= '$comments->setEmailTemplate("template_4.html");<br>';
        $text .= '$comments->setModerationEmail("email1@mydomain.com,email2@mydomain.com");<br>';
        $text .= '$comments->setReplyNotification(2);<br>';
        $text .= '$comments->setStatusChangeNotification(["1","2"]);<br>';
        $text .= '$comments->setFormHeadlineTag("h1");<br>';
        $text .= '$comments->showStarRating(2);<br>';
        $text .= '$comments->disableTooltip(false);<br>';
        $text .= '$comments->hideCharacterCounter(true);<br>';
        $text .= '$comments->setPrivacyType(1);<br>';
        $text .= '$comments->setListHeadlineTag("h1");<br>';
        $text .= '$comments->setReplyDepth(1);<br>';
        $text .= '$comments->sortNewestToOldest(true);<br>';
        $text .= '$comments->showVoting(false);<br>';
        $text .= '$comments->setDateFormat(0);<br>';
        $text .= '$comments->setCaptchaType("none");<br>';
        $text .= '$comments->setPaginationNumber(10);<br>';
        $text .= '$comments->setPaginationAlignment("right");<br>';
        $text .= '$comments->setSenderEmailAddress("myemailaddress@example.com");<br>';
        $text .= '$comments->setSenderName("ProcessWire");<br>';
        $text .= '$comments->setListHeadlineText("My comment list headline");<br>';
        $text .= '$comments->setFormHeadlineText("My form headline");<br>';
        $text .= '$comments->showFormAfterComments(false);<br>';
        $text .= '$comments->removeJS(true);<br>';
        $text .= '$comments->useCSS(false);<br>';
        $text .= '$comments->setFormHeadlineText("none");<br>';
        $text .= 'echo $comments->render();';
        $text .= '</code></pre>';
        $link = '<a href ="https://github.com/juergenweb/FrontendComments\" target="_blank">' . $this->_('docs') . '</a>';
        $text .= '<p>' . sprintf($this->_('You can find much more information about this module inside the %s.'), $link) . '</p>';

        /**  InputfieldMarkup $description */
        $description = $this->wire()->modules->get('InputfieldMarkup');
        $description->set('markupText', $text);
        $docFieldset->add($description);
        $inputfields->add($docFieldset);

        // output all input fields (parent and custom)
        return $inputfields;

    }

    /**
     * Run during installation
     * @return void
     */
    public function ___install(): void
    {

        // create a table for queuing emails that will be sent to users
        if (!$this->database->tableExists(self::queueTable)) {

            $sql = '
            CREATE TABLE ' . self::queueTable . ' (
                id int unsigned NOT NULL auto_increment,
                parent_id int unsigned NOT NULL,
                comment_id int unsigned NOT NULL,              
                email varchar(255) NOT NULL,
                page_id int unsigned NOT NULL,
                field_id int unsigned NOT NULL,
                PRIMARY KEY (id),
                INDEX created (comment_id)
            )
            ';

            $this->database->exec($sql);
        }
    }

    /**
     * Method, which runs on uninstalling of this module
     * @return void
     */
    public function ___uninstall(): void
    {
        // uninstall the FrontendCommentsManager module too if it is installed
        if (wire('modules')->isInstalled('FrontendCommentsManager')) {
            wire('modules')->uninstall('FrontendCommentsManager');
        }

        // delete the queue table
        $this->database->query("DROP TABLE IF EXISTS " . self::queueTable);

    }

    /**
     * Get default values for configuration fields
     * This is necessary to get them via getModuleConfig() without saving the configuration page after the
     * installation If the values are not stored inside the DB, they are not reachable via getModuleConfig();
     * return an array
     */
    public static function getDefaultData(): array
    {

        return [
            'input_fc_moderate' => 0,
            'input_fc_quiet_save' => 0,
            'input_fc_loggedin_only' => 0,
            'input_fc_userimage' => 'none',
            'input_fc_showWebsite' => 0,
            'input_fc_website' => 'none',
            'input_fc_author' => 'name',
            'input_fc_emailTemplate' => 'inherit',
            'input_fc_emailtype' => 'text',
            'input_fc_default_to' => '',
            'input_fc_defaultPWField_to' => '',
            'input_fc_email' => '',
            'input_fc_sender' => '',
            'input_fc_comment_notification' => 1,
            'input_fc_status_change_notification' => 1,
            'input_fc_showLinkGuidelines' => 0,
            'input_fc_outputorder' => 1,
            'input_fc_formheadline' => '',
            'input_fc_form_tag_headline' => 'h2',
            'input_fc_privacy_show' => 2,
            'input_fc_stars' => 0,
            'input_fc_counter' => 0,
            'input_privacy_type' => 2,
            'input_guidelines_type' => 0,
            'input_fc_commentsheadline' => '',
            'input_fc_comments_tag_headline' => 'h2',
            'input_fc_depth' => 3,
            'input_fc_sort' => 0,
            'input_fc_voting' => 0,
            'input_fc_voting_lock' => 3,
            'input_dateformatcomment' => 0,
            'input_removeFrontendCommentsJS' => 0,
            'input_removeFrontendCommentsCSS' => 0,
            'input_fc_reverse_output' => 0,
            'input_fc_spam' => 3,
            'input_fc_captcha' => 'inherit',
            'input_fc_pagnumber' => 10,
            'input_fc_pagorientation' => 'center',
            'input_fc_reply_depth' => 3,
            'input_fc_dateformat' => 0
        ];

    }

    /**
     * Helper function to set the default value for a field
     * @param Field $field
     * @param $inputfield
     * @return mixed
     */
    protected function getConfigValue(Field $field, $inputfield): mixed
    {
        $name = $inputfield->name;
        return $field->$name ?? $this->getDefaultData()[$name];
    }

}
